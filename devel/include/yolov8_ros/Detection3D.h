// Generated by gencpp from file yolov8_ros/Detection3D.msg
// DO NOT EDIT!


#ifndef YOLOV8_ROS_MESSAGE_DETECTION3D_H
#define YOLOV8_ROS_MESSAGE_DETECTION3D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace yolov8_ros
{
template <class ContainerAllocator>
struct Detection3D_
{
  typedef Detection3D_<ContainerAllocator> Type;

  Detection3D_()
    : header()
    , class_name()
    , confidence(0.0)
    , bbox()
    , position()  {
    }
  Detection3D_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , class_name(_alloc)
    , confidence(0.0)
    , bbox(_alloc)
    , position(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _class_name_type;
  _class_name_type class_name;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _bbox_type;
  _bbox_type bbox;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::yolov8_ros::Detection3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolov8_ros::Detection3D_<ContainerAllocator> const> ConstPtr;

}; // struct Detection3D_

typedef ::yolov8_ros::Detection3D_<std::allocator<void> > Detection3D;

typedef boost::shared_ptr< ::yolov8_ros::Detection3D > Detection3DPtr;
typedef boost::shared_ptr< ::yolov8_ros::Detection3D const> Detection3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolov8_ros::Detection3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolov8_ros::Detection3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yolov8_ros::Detection3D_<ContainerAllocator1> & lhs, const ::yolov8_ros::Detection3D_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.class_name == rhs.class_name &&
    lhs.confidence == rhs.confidence &&
    lhs.bbox == rhs.bbox &&
    lhs.position == rhs.position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yolov8_ros::Detection3D_<ContainerAllocator1> & lhs, const ::yolov8_ros::Detection3D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yolov8_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yolov8_ros::Detection3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolov8_ros::Detection3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov8_ros::Detection3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov8_ros::Detection3D_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov8_ros::Detection3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov8_ros::Detection3D_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolov8_ros::Detection3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "10feea4dded533dc176309f10ff7df1a";
  }

  static const char* value(const ::yolov8_ros::Detection3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x10feea4dded533dcULL;
  static const uint64_t static_value2 = 0x176309f10ff7df1aULL;
};

template<class ContainerAllocator>
struct DataType< ::yolov8_ros::Detection3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolov8_ros/Detection3D";
  }

  static const char* value(const ::yolov8_ros::Detection3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolov8_ros::Detection3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Detection3D.msg\n"
"std_msgs/Header header\n"
"string class_name\n"
"float32 confidence\n"
"float32[] bbox  # [x_min, y_min, x_max, y_max]\n"
"float32[] position  # [x, y, z] (3D position, optional)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::yolov8_ros::Detection3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolov8_ros::Detection3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.class_name);
      stream.next(m.confidence);
      stream.next(m.bbox);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Detection3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolov8_ros::Detection3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolov8_ros::Detection3D_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "class_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.class_name);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "bbox[]" << std::endl;
    for (size_t i = 0; i < v.bbox.size(); ++i)
    {
      s << indent << "  bbox[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.bbox[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLOV8_ROS_MESSAGE_DETECTION3D_H
